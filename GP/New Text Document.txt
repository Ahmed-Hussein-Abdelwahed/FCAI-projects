import pandas as pd
import numpy as np
# import seaborn as sns
import matplotlib.pyplot as plt

pd.options.display.width = None
pd.options.display.max_rows = None

# # 23 weeks and other(period= last day in 2019)
data_2019 = pd.read_excel('products weekly sum.xlsx', sheet_name='2019')
sales_2019 = data_2019.drop(['product_id', 'avg per week', 'ceiling avg per week'], axis=1)
sales_2019 = sales_2019.T  # we will transpose dataframe in order to represent each product in a column over weeks
#
# # print(sales_2019.shape)  # 24 weeks * 920 products
#
# # print('maximum skew ', np.max(sales_2019.skew()))  # 4.89
# # print('minimum skew ', np.min(sales_2019.skew()))  # 0.62
#
# fig, (ax1, ax2) = plt.subplots(nrows=1,
#                                ncols=2,
#                                figsize=(10, 5))
# ax1.hist(sales_2019.skew())
# ax1.set(title='year 2019 products skewness (before treatment)',
#         xlabel='Skewness value',
#         ylabel='Number of products')
#
#
# # first method to treat outliers (Quantile-based Flooring and Capping):
# # we will insert 0.10 quartile in each cell that has value less than 0.10 quartile
# # we will insert 0.90 quartile in each cell that has value greater than 0.90 quartile
#
ten_percent_quantile = sales_2019.quantile(0.10)
ninety_percent_quantile = sales_2019.quantile(0.90)

for i in range(len(sales_2019.columns)):
    sales_2019[sales_2019.columns[i]] = np.where(sales_2019[sales_2019.columns[i]] < ten_percent_quantile[i],
                                                 ten_percent_quantile[i], sales_2019[sales_2019.columns[i]])
    sales_2019[sales_2019.columns[i]] = np.where(sales_2019[sales_2019.columns[i]] > ninety_percent_quantile[i],
                                                 ninety_percent_quantile[i], sales_2019[sales_2019.columns[i]])

print(sales_2019)

print('=' * 50)
print(sales_2019.T)
# # print('maximum skew after treatment outliers ', np.max(sales_2019.skew()))  # 2.42
# # print('minimum skew after treatment outliers ', np.min(sales_2019.skew()))  # 0.0
#
# ax2.hist(sales_2019.skew())
# ax2.set(title='year 2019 products skewness (after treatment)',
#         xlabel='Skewness value',
#         ylabel='Number of products')
# plt.show()


# second method to treat outliers (Replacing Outliers with Median Values)
# we will replace all those cells that have values greater than the 95th percentile, with the median value


# fifty_percent_quantile = sales_2019.quantile(0.50)
# ninety_five_percent_quantile = sales_2019.quantile(0.95)
#
# for i in range(len(sales_2019.columns)):
#     sales_2019[sales_2019.columns[i]] = np.where(sales_2019[sales_2019.columns[i]] > ninety_five_percent_quantile[i],
#                                                  fifty_percent_quantile[i], sales_2019[sales_2019.columns[i]])

# print('maximum skew after treatment outliers ', np.max(sales_2019.skew()))  # 4.89
# print('minimum skew after treatment outliers ', np.min(sales_2019.skew()))  # 0.0

# plt.hist(sales_2019.skew())
# plt.title('Histogram for skewness for year 2019 products (after treatment)')
# plt.xlabel('Skewness value')
# plt.ylabel('Number of products')
# plt.show()


# data_2020 = pd.read_excel('products weekly sum.xlsx', sheet_name='2020')
# sales_2020 = data_2020.drop(['product_id', 'avg per week', 'ceiling avg per week'], axis=1)
# sales_2020 = sales_2020.T

# print('maximum skew in 2020 products sales ', np.max(sales_2020.skew()))  # 7.28
# print('minimum skew in 2020 products sales ', np.min(sales_2020.skew()))  # -0.10

# plt.hist(sales_2020.skew())
# plt.show()


# data_2021 = pd.read_excel('products weekly sum.xlsx', sheet_name='2021')
# sales_2021 = data_2021.drop(['product_id', 'avg per week', 'ceiling avg per week'], axis=1)
# sales_2021 = sales_2021.T

# print('maximum skew in 2021 products sales ', np.max(sales_2021.skew()))  # 7.28
# print('minimum skew in 2021 products sales ', np.min(sales_2021.skew()))  # -0.69

# plt.hist(sales_2021.skew())
# plt.show()

def draw_scatter_plot(data, product_id, file_name):
    try:
        product = data[data['product_id'] == product_id]
        fig = px.scatter(product, x='order_date', y='quantities_sold',
                         title='product id ' + str(product['product_id'].iloc[0]) + ' scatter plot')
        fig.write_html(file_name + '\\product id ' + str(product['product_id'].iloc[0]) + ' scatter plot.html')
    except:
        print('product id is not found')


def pass_ids(data, ids, file):
    for i in ids:
        draw_scatter_plot(data, i, file)

